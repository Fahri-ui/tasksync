// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  password   String?
  role       Role     @default(USER)
  verifiedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relasi OTP
  otps Otp[]

  // Relasi untuk sistem pertemanan
  sentFriendships     Friendship[] @relation("FriendshipRequester")
  receivedFriendships Friendship[] @relation("FriendshipAddressee")

  // Relasi untuk proyek
  createdProjects Project[] @relation("ProjectCreator")
  projectMembers  ProjectMember[]

  // Relasi untuk tugas
  assignedTasks Task[] @relation("TaskAssignee")

  @@map("users") // Tetap map ke tabel plural
}

model Otp {
  id        String   @id @default(cuid())
  code      String
  expiry    DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("otps")
}

model Friendship {
  id           String   @id @default(cuid())
  requesterId  String
  addresseeId  String
  createdAt    DateTime @default(now())

  requester User @relation("FriendshipRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  addressee User @relation("FriendshipAddressee", fields: [addresseeId], references: [id], onDelete: Cascade)

  @@unique([requesterId, addresseeId])
  @@map("friendships")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  deadline    DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   String

  creator User            @relation("ProjectCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  members ProjectMember[]
  tasks   Task[]

  @@map("projects")
}

model ProjectMember {
  id        String      @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  projectId   String
  assignedTo  String
  deadline    DateTime
  status      TaskStatus @default(BELUM_SELESAI)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedUser User    @relation("TaskAssignee", fields: [assignedTo], references: [id], onDelete: Cascade)

  @@map("tasks")
}

enum Role {
  ADMIN
  USER
}

enum ProjectRole {
  MANAGER
  MEMBER
}

enum TaskStatus {
  BELUM_SELESAI
  SELESAI
}